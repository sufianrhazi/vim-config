set nocompatible


" neobundle settings
" ------------------

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'


" bundles
" -------

" Shougo's stuff:

NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/unite.vim'

" git
NeoBundle "tpope/vim-fugitive"

" syntax
NeoBundle "scrooloose/syntastic"

" column
NeoBundle "godlygeek/tabular"

" color
NeoBundle "altercation/vim-colors-solarized"

" ack
NeoBundle "mileszs/ack.vim"

" nerdtree
NeoBundle "scrooloose/nerdtree"

" surround
NeoBundle "tpope/vim-surround"

" haskell
NeoBundle "dag/vim2hs"
NeoBundle "eagletmt/ghcmod-vim"
NeoBundle "lukerandall/haskellmode-vim"
NeoBundle "ujihisa/neco-ghc"


filetype plugin indent on

NeoBundleCheck


" General usability
" -----------------

set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=8
set backspace=2


" Display options
" ---------------

set ruler
set showcmd
set showmode
set hlsearch
set ignorecase
set smartcase
set t_Co=256 " 256 colors, srsly
let g:solarized_termcolors=256
syntax enable
colorscheme solarized
set background=dark


" unite options
" -------------

call unite#filters#matcher_default#use(['matcher_fuzzy'])

map ,b :Unite buffer<CR>
map ,f :Unite file_rec/async<CR>
map <C-p> :Unite file_rec/async<CR>
map ,/ :Unite grep:.<CR>


"nnoremap <space>/ :Unite grep:.<cr>


" neocomplete options
" -------------------

let g:acp_enableAtStartup = 0

let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 4

" key-mappings

" <CR>: close popup and save indent
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return pumvisible() ? neocomplete#smart_close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backwaord char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Omni completion:

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Heavy omni completion:

if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif


" Syntastic Options
" -----------------

let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_enable_highlighting=1
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': [] }
let g:syntastic_error_symbol='⚑'
let g:syntastic_style_error_symbol='⚑'
let g:syntastic_warning_symbol='»'
let g:syntastic_style_warning_symbol='»'

let g:syntastic_python_pylint_post_args="--disable=C0111,C0103,C0301,R0921,I0011,W0141"


" Leader mappings
" ---------------

map ,gs :Git show <cword><CR>
map ,gb :Gblame<CR>
map ,gd :Gdiff<CR>
map ,h :nohls<CR>
map ,ws :%s/ \+$//<CR>
map ,nt :NERDTreeToggle<CR>


" Insert mappings
" ---------------

imap `alpha α
imap `beta β
imap `gamma γ
imap `Delta Δ
imap `lambda λ
imap `mu μ
imap `pi π
imap `Sigma Σ
imap `Theta Θ
imap `theta θ
imap `Omega Ω

imap `lquot “
imap `rquot ”

imap `uarr ↑
imap `rarr →
imap `darr ↓
imap `larr ←
imap `barr ↔

imap `check ✓
imap `cross ✗

imap `copy ©
imap `tm ™

imap `cr ␍
imap `lf ␊

imap `degree °

imap `info ℹ
imap `warning ⚠

imap `dagger †
imap `doubledagger ‡

imap `forall ∀
imap `exists ∃

imap `intersect ∩
imap `union ∪
imap `subset ⊂
imap `element ∈

imap `emdash —
imap `endash –

imap `flat ♭
imap `natural ♮
imap `sharp ♯


" Visual mappings
" ---------------

" Tabular tools
vmap ,= :Tabularize /^[^=]*\zs=<CR>
vmap ,: :Tabularize /^[^:]*\zs:<CR>
vmap ,? :Tabularize /^[^=?:]*\zs[=?:]<CR>
vmap ,/ :Tabularize /^[^/]*\zs/<CR>
vmap ,\| :Tabularize /\|<CR>


" Filetype mappings
" -----------------

au BufNewFile,BufRead SConstruct set ft=python
au BufNewFile,BufRead *.scons set ft=python
au BufNewFile,BufRead *.ts set ft=typescript
au BufNewFile,BufRead *.md set ft=markdown
au BufNewFile,BufRead *.tml set ft=htmldjango

au BufNewFile,BufRead *.hs set colorcolumn=80
au BufNewFile,BufRead *.hs map ,tt :GhcModType<CR>
au BufNewFile,BufRead *.hs map ,tc :GhcModTypeClear<CR>
